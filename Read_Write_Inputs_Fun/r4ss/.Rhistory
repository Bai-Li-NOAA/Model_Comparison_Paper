surveyindex [pos = '-3,-4.5!',label = 'Survey\nabundance index']
surveyacomp [pos = '-3,-6!',label = 'Survey age\ncomposition']
abundance -> surveysel ->surveyq -> surveyindex -> surveyacomp;
node[shape = rectangle, fillcolor = deepskyblue4, margin = 0.2, width=2.5]
landings [pos = '0,0!', label ='Landings']
landingsacomp [pos = '3,0!', label ='Landings age\ncomposition']
abundance -> landings -> landingsacomp;
node[style = filled, margin = 0.1, width=2.5]
output [pos = '3,-4.5!', label = 'Output data', shape = diamond, fillcolor = 'tomato2']
end [pos = '3,-6!', label = 'End', shape = ellipse, fillcolor = 'firebrick']
brp -> output;
landingsacomp -> output;
surveyacomp -> output;
output -> end;
}
"
)
flowchart %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("C:\\Users\\bai.li\\Desktop\\flowchart.png")
flowchart <- grViz("
digraph SEM {
graph [layout = neato, overlap = true, outputorder = edgesfirst]
node[style = filled, margin = 0.1, fontcolor ='white', width=2.5, fontsize=20, fontname='bold']
start [pos = '-3,4.5!', label = 'Start', shape = ellipse, fillcolor = 'firebrick']
input [pos = '-6,4.5!', label = 'Input data', shape = diamond, fillcolor = 'tomato2']
start -> input;
node[shape = rectangle, fillcolor = maroon, margin = 0.2, width=2.5]
length [pos = '-6,3!', label = 'Length-at-age']
weight [pos = '-3,3!', label = 'Weight-at-age']
maturity [pos = '0,3!',label = 'Maturity-at-age']
selectivity [pos = '3,3!',label = 'Selectivity-at-age']
input -> length -> weight -> maturity;
node[shape = rectangle, fillcolor = seagreen4, margin = 0.2, width=2.5]
spr0 [pos = '3,1.5!',label = 'SPR (F=0)']
fishsel [pos = '0,1.5!',label = 'Selectivity\nfor landings']
mortality [pos = '-3,1.5!', label ='Mortality rates']
recruit [pos = '-6,1.5!', label ='Recruit']
ssb [pos = '-6,0!', label ='SSB']
abundance [pos = '-3, 0!', label = 'Abundance']
maturity -> spr0 -> fishsel -> mortality -> recruit -> ssb -> abundance;
node[shape = rectangle, fillcolor = gray10, margin = 0.2, width=2.5]
brp [pos = '0,-1.5!',label = 'Reference\npoints']
abundance -> brp;
node[shape = rectangle, fillcolor = dodgerblue4, margin = 0.2, width=2.5]
surveysel [pos = '-3,-1.5!',label = 'Selectivity\nfor survey']
surveyq [pos = '-3,-3!',label = 'Survey\ncatchability']
surveyindex [pos = '-3,-4.5!',label = 'Survey\nabundance index']
surveyacomp [pos = '-3,-6!',label = 'Survey age\ncomposition']
abundance -> surveysel ->surveyq -> surveyindex -> surveyacomp;
node[shape = rectangle, fillcolor = deepskyblue4, margin = 0.2, width=2.5]
landings [pos = '0,0!', label ='Landings']
landingsacomp [pos = '3,0!', label ='Landings age\ncomposition']
abundance -> landings -> landingsacomp;
node[style = filled, margin = 0.1, width=2.5]
output [pos = '3,-4.5!', label = 'Output data', shape = diamond, fillcolor = 'tomato2']
end [pos = '3,-6!', label = 'End', shape = ellipse, fillcolor = 'firebrick']
brp -> output;
landingsacomp -> output;
surveyacomp -> output;
output -> end;
}
"
)
flowchart %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("C:\\Users\\bai.li\\Desktop\\flowchart.png")
flowchart <- grViz("
digraph SEM {
graph [layout = neato, overlap = true, outputorder = edgesfirst]
node[style = filled, margin = 0.1, fontcolor ='white', width=2.5, fontsize=20, fontname='bold']
start [pos = '-3,4.5!', label = 'Start', shape = ellipse, fillcolor = 'firebrick']
input [pos = '-6,4.5!', label = 'Input data', shape = diamond, fillcolor = 'tomato2']
start -> input;
node[shape = rectangle, fillcolor = maroon, margin = 0.2, width=2.5]
length [pos = '-6,3!', label = 'Length-at-age']
weight [pos = '-3,3!', label = 'Weight-at-age']
maturity [pos = '0,3!',label = 'Maturity-at-age']
selectivity [pos = '3,3!',label = 'Selectivity-at-age']
input -> length -> weight -> maturity -> selectivity;
node[shape = rectangle, fillcolor = seagreen4, margin = 0.2, width=2.5]
spr0 [pos = '3,1.5!',label = 'SPR (F=0)']
fishsel [pos = '0,1.5!',label = 'Selectivity\nfor landings']
mortality [pos = '-3,1.5!', label ='Mortality rates']
recruit [pos = '-6,1.5!', label ='Recruit']
ssb [pos = '-6,0!', label ='SSB']
abundance [pos = '-3, 0!', label = 'Abundance']
selectivity -> spr0 -> fishsel -> mortality -> recruit -> ssb -> abundance;
node[shape = rectangle, fillcolor = gray10, margin = 0.2, width=2.5]
brp [pos = '0,-1.5!',label = 'Reference\npoints']
abundance -> brp;
node[shape = rectangle, fillcolor = dodgerblue4, margin = 0.2, width=2.5]
surveysel [pos = '-3,-1.5!',label = 'Selectivity\nfor survey']
surveyq [pos = '-3,-3!',label = 'Survey\ncatchability']
surveyindex [pos = '-3,-4.5!',label = 'Survey\nabundance index']
surveyacomp [pos = '-3,-6!',label = 'Survey age\ncomposition']
abundance -> surveysel ->surveyq -> surveyindex -> surveyacomp;
node[shape = rectangle, fillcolor = deepskyblue4, margin = 0.2, width=2.5]
landings [pos = '0,0!', label ='Landings']
landingsacomp [pos = '3,0!', label ='Landings age\ncomposition']
abundance -> landings -> landingsacomp;
node[style = filled, margin = 0.1, width=2.5]
output [pos = '3,-4.5!', label = 'Output data', shape = diamond, fillcolor = 'tomato2']
end [pos = '3,-6!', label = 'End', shape = ellipse, fillcolor = 'firebrick']
brp -> output;
landingsacomp -> output;
surveyacomp -> output;
output -> end;
}
"
)
flowchart %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("C:\\Users\\bai.li\\Desktop\\flowchart.png")
require(data.table)
install.packages("data.table")
install.packages("glmnet")
month=0:13
z=0.3
text = 1-exp(-(month/12)*z)
code = exp(-1.0*((month-1.0)/12.0)*z)
text
code
dat.sim1
##########GENERAL HEADER INPUT############################################################
cat(as.character(paste("#######GENERAL HEADER INPUT#######",collapse="\t")), sep="\n")
#Starting and ending year of the model (year data starts)
cat(as.character(paste(1,collapse="\t")), sep="\n")
cat(as.character(paste(nyr,collapse="\t")), sep="\n", append=TRUE)
sqrt(log(1+0.01^2))
sqrt(log(1+0.05^2))
sqrt(exp(0.1^2)-1)
#####################################################################################
#Define number of years and time series of annual F values
nyr=30
F= seq(0.01,0.4, length=nyr)*exp(rnorm(nyr, 0, 0.2)) #sequence of annual F values
#set the RN seed for repeatability if generating stochastic results
set.seed(9924)
#####################################################################################
#Define number of years and time series of annual F values
nyr=30
F= seq(0.01,0.4, length=nyr)*exp(rnorm(nyr, 0, 0.2)) #sequence of annual F values
#####################################################################################
#Most life-history params from Siegfried et al. (data prioritization)
ages=1:12           #Age structure of the popn
nages=length(ages)  #Number ages modeled
#Define selectivity
A50.sel=2 #Age at 50% selection for landings
slope.sel=1 #Slope of selectivity for landings
A50.sel.survey=1.5 #Age at 50% selection for survey
slope.sel.survey=2 #Slope of selectivity for survey
#####################################################################################
double_logistic<-function(x,a1=100,b1=0, a2=100, b2=0){
## INPUT PARAMETERS:
##    x = vector or scalar of indepenent variable
##    a1 = slope parameter, default is 100 ("knife edge" for most applications)
##    b1 = location parameter: x giving 50% probability, default is 0
##    a2 = slope parameter, default is 100 ("knife edge" for most applications)
##    b2 = location parameter: x giving 50% probability, default is 0
## OUTPUT PARAMETERS:
##    P = values of fcn at x
P=1/(1+exp(-a1*(x-b1)))*(1-1/(1+exp(-a2*(x-b2))))
#P=1/(1+exp(-a*(x-b)))
return(P)
}
a=double_logistic(ages, a1=1, b1=2, a2=10, b2=1)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=1, b2=10)
plot(a)
a=double_logistic(ages, a1=0.1, b1=1, a2=0.5, b2=3)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=3)
plot(a)
A50.mat=2.25      #Age at 50% maturity
slope.mat=3       #Slope of maturity ogive
a=double_logistic(ages, a1=1, b1=3, a2=0.5, b2=8)
plot(a)
a=double_logistic(ages, a1=1, b12, a2=0.5, b2=8)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=8)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=6)
plot9a
plot(a)
a=double_logistic(ages, a1=2, b1=1.5, a2=0.5, b2=7)
plot(a)
a=double_logistic(ages, a1=2, b1=1.5, a2=0.5, b2=8)
plot(a)
lines(double_logistic(ages, a1=1, b1=2, a2=0.5, b2=6))
#####################################################################################
logistic<-function(x,a=100,b=0){
## INPUT PARAMETERS:
##    x = vector or scalar of indepenent variable
##    a = slope parameter, default is 100 ("knife edge" for most applications)
##    b = location parameter: x giving 50% probability, default is 0
## OUTPUT PARAMETERS:
##    P = values of fcn at x
P=1/(1+exp(-a*(x-b)))
return(P)
}
#Define selectivity
A50.sel=2 #Age at 50% selection for landings
slope.sel=1 #Slope of selectivity for landings
A50.sel.survey=1.5 #Age at 50% selection for survey
slope.sel.survey=2 #Slope of selectivity for survey
selex=logistic(ages,slope.sel,A50.sel) #selectivity
selex.survey=logistic(ages,slope.sel.survey,A50.sel.survey)
plot(selex.survey)
lines(selex)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=6)
b=double_logistic(ages, a1=2, b1=1.5, a2=1, b2=8)
plot(b)
lines(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=3.5)
plot(selex.survey)
lines(a)
plot(selex.survey, ylim=c(0,1))
lines(a)
a=double_logistic(ages, a1=1, b1=2, a2=9, b2=0.09)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.09, b2=9)
plot9a
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.1, b2=9)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.5, b2=9)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.2, b2=9)
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.15, b2=9)
plot(a)
a=double_logistic(ages, a1=1, b1=3, a2=0.15, b2=9)
plot9a
plot(a)
a=double_logistic(ages, a1=1, b1=2, a2=0.2, b2=9)
plot(a)
#Define selectivity
A50.sel1=2 #Age at 50% selection for landings
slope.sel1=1 #Slope of selectivity for landings
A50.sel2=9
slope.sel2=0.15
selex=double_logistic(ages,slope.sel1,A50.sel1, slope.sel2,A50.sel2)
plot(selex)
library(rstudioapi) #for obtaining current script location
library(gdata) #for write.fwf function from the SS_writectl_3.30 function
current_path <- getActiveDocumentContext()$path
maindir <- dirname(current_path)
setwd(dirname(dir))
dirname(dir)
current_path <- getActiveDocumentContext()$path
dirname(current_path)
maindir <- dirname(current_path)
setwd(dirname(dir))
load(file.path(maindir, "Outputs", "performance_measures_output.RData"))
load(file.path(maindir, "Outputs", "om_em_output.RData"))
fratio_list <- list(amak_list$fratio, asap_list$fratio, bam_list$fratio, ss_list$fratio)
ssbratio_list <- list(amak_list$ssbratio, asap_list$ssbratio, bam_list$ssbratio, ss_list$fratio)
overfishing_temp <- list()
overfishing_performance<-matrix(NA, nrow=par.sim1$nyr, ncol=4)
load(file.path(maindir, subdir, paste("OM", 1, ".RData", sep="")))
load(file.path(maindir, "OM", paste("OM", 1, ".RData", sep="")))
overfishing_temp <- list()
overfishing_performance<-matrix(NA, nrow=par.sim1$nyr, ncol=4)
for (k in 1:4){
overfishing_temp[[k]]<-matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
for(j in 1:om_sim_num){
for (i in 1:par.sim1$nyr){
if((fratio_list[[k]][i,j]<1 & om_list$fratio[i,j]<1) | (fratio_list[[k]][i,j]>1 & om_list$fratio[i,j]>1)){
overfishing_temp[[k]][i,j] = 1
} else{
overfishing_temp[[k]][i,j] = 0
}
}
}
overfishing_performance[,k] <- apply(overfishing_temp[[k]], 1, sum)/om_sim_num*100
}
om_sim_num <- 105
overfishing_temp <- list()
overfishing_performance<-matrix(NA, nrow=par.sim1$nyr, ncol=4)
for (k in 1:4){
overfishing_temp[[k]]<-matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
for(j in 1:om_sim_num){
for (i in 1:par.sim1$nyr){
if((fratio_list[[k]][i,j]<1 & om_list$fratio[i,j]<1) | (fratio_list[[k]][i,j]>1 & om_list$fratio[i,j]>1)){
overfishing_temp[[k]][i,j] = 1
} else{
overfishing_temp[[k]][i,j] = 0
}
}
}
overfishing_performance[,k] <- apply(overfishing_temp[[k]], 1, sum)/om_sim_num*100
}
overfishing_performance
overfished_temp <- list()
overfished_performance<-matrix(NA, nrow=par.sim1$nyr, ncol=4)
for (k in 1:4){
overfished_temp[[k]]<-matrix(NA, nrow=par.sim1$nyr, ncol=om_sim_num)
for(j in 1:om_sim_num){
for (i in 1:par.sim1$nyr){
if((ssbratio_list[[k]][i,j]*2<1 & om_list$ssbratio[i,j]*2<1) | (ssbratio_list[[k]][i,j]*2>1 & om_list$ssbratio[i,j]*2>1)){
overfished_temp[[k]][i,j] = 1
} else{
overfished_temp[[k]][i,j] = 0
}
}
}
overfished_performance[,k] <- apply(overfished_temp[[k]], 1, sum)/om_sim_num*100
}
write.csv(overfishing_performance, file=file.path(maindir, "Outputs", "overfishing_status.csv"))
write.csv(overfished_performance, file=file.path(maindir, "Outputs", "overfished_status.csv"))
install.packages("ISLR")
library(ISLR)
data(Hitters, package = "ISLR")
Hitters
View(Hitters)
sum(is.na(Hitters))
sum(is.na(Hitters$Salary))
Hitters = na.omit(Hitters)
sum(is.na(Hitters))
View(Hitters)
library(glmnet)
install.packages("glmnet")
X = model.matrix(Salary ~ ., Hitters)[, -1]
View(X)
View(Hitters)
y = Hitters$Salary
fit = lm(Salary ~ ., Hitters)
coef(fit)
coef(fit)[-1]
sum(abs(coef(fit)[-1]))
sum(coef(fit)[-1] ^ 2)
coef(fit)[-1]
sum(abs(coef(fit)[-1]))
install.packages("glmnet")
install.packages("penalized")
install.packages("survival")
library(penalized)
library(survival)
data(nki70)
View(nki70)
fit <- penalized(ER, ~DIAPH3+NUSAP1, data=nki70, lambda2=1)
summary(fit)
residuals(fit)
a=residuals(fit)
coefficients(fit, "all")
loglik(fit)
penalty(fit)
penalty
penfit
.makepenfit
fit
data(nki70)
fit <- penalized(ER, ~DIAPH3+NUSAP1, data=nki70, lambda2=1)
fit
object=fit
new("penfit")
!fusedl
object$beta
penalized
detectCores()
library(parallel)
detectCores()
library(rstudioapi) #for obtaining current script location
library(gdata) #for write.fwf function from the SS_writectl_3.30 function
library(PBSadmb)
library(stringr)
library(matrixcalc) # for calculate positive definite Hessian
current_path <- getActiveDocumentContext()$path
maindir <- dirname(current_path)
setwd(maindir)
folder_names <- c("OM", "AMAK", "ASAP", "BAM", "SS", "Figures", "Outputs")
om_sim_num <- 160
keep_sim_num <- 100
# if (om_sim_num==1){
#   seed_num <- 9924
#   save(seed_num, file=file.path(maindir, "seed_num.RData"))
# } else {
#   seed_num <- sample(100000, om_sim_num, replace=F)
#   save(seed_num, file=file.path(maindir, "seed_num.RData"))
# }
load(file.path(maindir, "seed_num.RData"))
seed_num <- seed_num[1:om_sim_num]
input.cv.L=0.01
input.cv.survey=0.2
cv.L=0.005
cv.survey=0.1
n.L=200
n.survey=200
logR.sd=0.2
#### Create main folders ####
sapply(folder_names, function(x) {
if (!file.exists(file.path(maindir, x))) dir.create(file.path(maindir, x))
})
#### Run Read_Write_Inputs_Fun ####
subdir = "Read_Write_Inputs_Fun"
setwd(file.path(maindir, subdir))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(file.path(maindir, subdir, "r4ss"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
ASAP_Run(maindir=maindir, subdir="ASAP", om_sim_num=om_sim_num)
#### Check convergence of iterations ####
positive_hessian = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.0001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.01 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient = matrix(NA, ncol=4, nrow=om_sim_num)
convergence_measures <- list(positive_hessian=positive_hessian, gradient_0.0001=gradient_0.0001, gradient_0.001=gradient_0.0001, gradient_0.01=gradient_0.0001, gradient=gradient)
for (om_sim in 1:om_sim_num){
subdir="AMAK"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 1] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("amak.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 1]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 1]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 1]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 1]<- temp
subdir="ASAP"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 2] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("asap3.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 2]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 2]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 2]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 2]<- temp
subdir="BAM"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 3] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("bam-sim.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 3]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 3]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 3]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 3]<- temp
subdir="SS"
setwd(file.path(maindir, subdir, paste("s", om_sim, sep="")))
temp <- getADMBHessian(File=file.path(maindir, subdir, paste("s", om_sim, sep="")), FileName="admodel.hes")$hes
convergence_measures$positive_hessian[om_sim, 4] <- ifelse(is.positive.definite((temp+t(temp))/2), 1, 0)
temp <- as.numeric(scan("ss.par", what='', n=16, quiet=TRUE)[c(6,11,16)])[3]
convergence_measures$gradient_0.0001[om_sim, 4]<- ifelse(temp>0.0001, 0, 1)
convergence_measures$gradient_0.001[om_sim, 4]<- ifelse(temp>0.001, 0, 1)
convergence_measures$gradient_0.01[om_sim, 4]<- ifelse(temp>0.01, 0, 1)
convergence_measures$gradient[om_sim, 4]<- temp
}
save(convergence_measures, file=file.path(maindir, "Outputs", "convergence_measures.RData"))
load(file.path(maindir, "Outputs", "convergence_measures.RData"))
not_positive_hessian <- unique(unlist(sapply(1:ncol(convergence_measures$positive_hessian), function(x) which(convergence_measures$positive_hessian[,x]==0))))
write.csv(not_positive_hessian, file=file.path(maindir, "Outputs", "Not_positive_hessian.csv"))
col= c("black", "orange", "green", "red", "deepskyblue3")
if(max(convergence_measures$gradient)<0.1){
jpeg(file=file.path(maindir, "Figures", "Gradient.jpg"), width=170, height=150, units="mm", res=300)
par(mfrow=c(2,2), mar=c(4,4,1,1))
xlim = c(0, max(convergence_measures$gradient))
bins <- seq(0, max(convergence_measures$gradient)*1.05, by=0.0005)
hist(convergence_measures$gradient[,1], xlim=xlim, xlab = "Gradient", main="", col=col[2], breaks = bins)
legend("topright", "AMAK", bty="n")
box()
hist(convergence_measures$gradient[,2], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[3])
legend("topright", "ASAP", bty="n")
box()
hist(convergence_measures$gradient[,3], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[4])
legend("topright", "BAM", bty="n")
box()
hist(convergence_measures$gradient[,4], xlim=xlim, xlab = "Gradient", main="", breaks = bins, col=col[5])
legend("topright", "SS", bty="n")
box()
dev.off()
}
length(which(convergence_measures$gradient[,2]<=0.001))/om_sim_num*100
length(which(convergence_measures$gradient[,2]<=0.002))/om_sim_num*100
library(rstudioapi) #for obtaining current script location
library(gdata) #for write.fwf function from the SS_writectl_3.30 function
library(PBSadmb)
library(stringr)
library(matrixcalc) # for calculate positive definite Hessian
current_path <- getActiveDocumentContext()$path
maindir <- dirname(current_path)
setwd(maindir)
folder_names <- c("OM", "AMAK", "ASAP", "BAM", "SS", "Figures", "Outputs")
om_sim_num <- 160
keep_sim_num <- 100
# if (om_sim_num==1){
#   seed_num <- 9924
#   save(seed_num, file=file.path(maindir, "seed_num.RData"))
# } else {
#   seed_num <- sample(100000, om_sim_num, replace=F)
#   save(seed_num, file=file.path(maindir, "seed_num.RData"))
# }
load(file.path(maindir, "seed_num.RData"))
seed_num <- seed_num[1:om_sim_num]
input.cv.L=0.01
input.cv.survey=0.2
cv.L=0.005
cv.survey=0.1
n.L=200
n.survey=200
logR.sd=0.2
#### Create main folders ####
sapply(folder_names, function(x) {
if (!file.exists(file.path(maindir, x))) dir.create(file.path(maindir, x))
})
#### Run Read_Write_Inputs_Fun ####
subdir = "Read_Write_Inputs_Fun"
setwd(file.path(maindir, subdir))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(file.path(maindir, subdir, "r4ss"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
#### Check convergence of iterations ####
positive_hessian = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.0001 = matrix(NA, ncol=4, nrow=om_sim_num)
gradient_0.001 = matrix(NA, ncol=4, nrow=om_sim_num)
load(file.path(maindir, "Outputs", "convergence_measures.RData"))
which(convergence_measures$gradient[,2] %in% boxplot.stats(convergence_measures$gradient[,2])$out)
14/160
